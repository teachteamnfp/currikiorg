
// {{groovy}}
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import org.curriki.plugin.spacemanager.impl.CurrikiSpaceManager
import org.curriki.plugin.spacemanager.plugin.CurrikiSpaceManagerPluginApi
import org.xwiki.model.reference.DocumentReference

import java.lang.reflect.Method

Log LOG = LogFactory.getLog("groovyPages.Search2.IndexProcessor");
println("= Inject discussions into group =");
String wikiName = doc.getDocumentReference().wikiReference.name;
if(!(request.group==null || request.group=='')) {

    String group = request.group;
    LOG.warn("Injecting discussions in all groups.");
    if("*".equals(group)) {
        println("Creating discussions for all groups...");
        List list = xwiki.getSpaces();
        LOG.warn("Injecting into ${list.size()} spaces.")
        for(String spaceName in xwiki.getSpaces()) {
            if(!spaceName.startsWith("Group_") || spaceName.endsWith("_Invitations")) continue;
            LOG.warn("Processing space " + spaceName);
            println("* processing space ${spaceName}");
            DocumentReference targetRef = new DocumentReference(wikiName, "Group_" + group, "Discussions");
            group = spaceName.substring("Group_".length());
            if(!xwiki.exists("Group_"+ group + ".WebPreferences")) {
                println("* Sorry, there seems to be no group of name " + group + ".");
            } else if (xwiki.exists(targetRef) && ! request.force==1) {
                println("* Group ${group} already has a discussions.")
            } else {
                if(xwiki.copyDocument(new DocumentReference(wikiName,"Groups_TemplateSpace","Discussions"),targetRef, "en", false, true)) {
                    println("* Group ${group}: Succeeded copying to [[Discussions>>Group_" + group + ".Discussions]].");
                } else {
                    println("* Group ${group}: Failed copying.");
                }
            }

            // checking the Discussions_Group_${groupName}.WebPreferences
            // needs edit and admin right for XWiki.XWikiAdmin and edit right for Group_${group}.Members
            println("Updating rights.");
            try {
                CurrikiSpaceManagerPluginApi csm = xwiki.csm;
                csm.setSubSpaceRights(csm.getSpace("Group_" + group), "Discussions");
                println("Successfully updated rights of ${group}.");
            } catch (Exception ex) {
                println("Failed updating rights: " + ex);
                ex.printStackTrace();
            }
        }
    } else {
        DocumentReference targetRef = new DocumentReference(wikiName, "Group_" + group, "Discussions");
        if(xwiki.exists(targetRef)) {
            println("Discussions for this group already exist.");
        } else {
            println("Creating discussions for group...");
            if(!xwiki.exists("Group_"+ group + ".WebPreferences")) {
                println("Sorry, there seems to be no group of name " + group + ".");
            } else {
                if(xwiki.copyDocument(new DocumentReference(wikiName,"Groups_TemplateSpace","Discussions"),targetRef, "en", false, false)) {
                    println("Succeeded copying to [[Discussions>>Group_" + group + ".Discussions]].");
                } else {
                    println("Failed copying.");
                }
            }
        }
        // checking the Discussions_Group_${groupName}.WebPreferences
        // needs edit and admin right for XWiki.XWikiAdmin and edit right for Group_${group}.Members
        println("Updating rights.");
        try {
            CurrikiSpaceManagerPluginApi csm = xwiki.csm;
            csm.setSubSpaceRights(csm.getSpace("Group_" + group), "Discussions");
            println("Successfully updated rights of ${group}.xxx");
        } catch (Exception ex) {
            println("Failed updating rights: " + ex);
            ex.printStackTrace();
        }
    }
} else {
    println("{{html clean='false'}}<form action='${doc.name}' method='post'>Group name: <input type='text' name='group'></form>{{/html}}");
}
// {{/groovy}}
<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Affiliate</web>
<name>PartnerEncryptGroovy</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.adminPolx</author>
<customClass></customClass>
<contentAuthor>XWiki.adminPolx</contentAuthor>
<creationDate>1220108906000</creationDate>
<date>1291854356000</date>
<contentUpdateDate>1291854356000</contentUpdateDate>
<version>6.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Affiliate.PartnerEncryptGroovy</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid></guid>
<property>
<tags/>
</property>
</object>
<content>/* Groovy Class [View Code&gt;$doc.fullName?viewer=code] #* */
import java.security.MessageDigest;
import org.apache.commons.codec.binary.Base64;
import com.xpn.xwiki.web.XWikiRequest;

public class PartnerEncryptGroovy {
    public def verify(XWikiRequest request){
        String toencrypt="";
        String param_name="affiliate_id";
        String param=request.getParameter(param_name);
        toencrypt+=param_name;
        if(param!=null&amp;&amp;!param.equals("")){
            toencrypt+=param;
        }
        param_name="email";
        param=request.getParameter(param_name);
        toencrypt+=param_name;
        if(param!=null&amp;&amp;!param.equals("")){
            toencrypt+=param;
        }
        param_name="login_id";
        param=request.getParameter(param_name);
        toencrypt+=param_name;
        if(param!=null&amp;&amp;!param.equals("")){
            toencrypt+=param;
        }
        param_name="first_name";
        param=request.getParameter(param_name);
        toencrypt+=param_name;
        if(param!=null&amp;&amp;!param.equals("")){
            toencrypt+=param;
        }
        param_name="last_name";
        param=request.getParameter(param_name);
        toencrypt+=param_name;
        if(param!=null&amp;&amp;!param.equals("")){
            toencrypt+=param;
        }
        param_name="password";
        param=request.getParameter(param_name);
        toencrypt+=param_name;
        if(param!=null&amp;&amp;!param.equals("")){
            toencrypt+=param;
        }
        param_name="affiliation";
        param=request.getParameter(param_name);
        toencrypt+=param_name;
        if(param!=null&amp;&amp;!param.equals("")){
            toencrypt+=param;
        }
        try{
            MessageDigest md5=MessageDigest.getInstance("MD5");
            md5.update(toencrypt.getBytes());
            byte[] bytes=md5.digest();
            String encryptext=new String(Base64.encodeBase64(bytes)).replaceAll("=","");
            return encryptext.equals(request.getParameter("validkey"));
        }catch(Exception e){
            return false;
        }
    }
}
/* *# */</content></xwikidoc>

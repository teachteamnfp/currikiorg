<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Admin</web>
<name>iContactUpdateTool</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.adminPolx</creator>
<author>XWiki.adminPolx</author>
<customClass></customClass>
<contentAuthor>XWiki.adminPolx</contentAuthor>
<creationDate>1326128130000</creationDate>
<date>1326873222000</date>
<contentUpdateDate>1326873222000</contentUpdateDate>
<version>135.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>cli-upload.</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<content>import com.xpn.xwiki.api.*
import org.jdom.Element;
import org.jdom.filter.ElementFilter
import org.apache.commons.httpclient.HttpClient
import org.apache.commons.httpclient.methods.PostMethod
import org.jdom.input.SAXBuilder
import org.apache.commons.httpclient.methods.PutMethod
import org.apache.commons.httpclient.methods.GetMethod
import org.apache.commons.httpclient.HttpMethod
import org.apache.commons.httpclient.methods.DeleteMethod
import org.jdom.output.XMLOutputter
import org.apache.log4j.helpers.ISO8601DateFormat
import java.text.DateFormat
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import org.jdom.output.Format
import org.apache.commons.io.IOUtils
import com.xpn.xwiki.web.XWikiServletRequest
import com.xpn.xwiki.criteria.impl.RevisionCriteria
import com.xpn.xwiki.criteria.impl.Period
import org.jdom.xpath.XPath

public class iContactUpdateTool {

    // ========================= environment ==============================
    private XWiki xwiki;
    private Context context;
    private static Log LOG = LogFactory.getLog("groovyPages.iContactUpdateTool");

    public void init(XWiki xwiki, Context context) {
        this.xwiki = xwiki;
        this.context = context;
        if (baseURL==null) initConfig();
        refetchDoc();
    }



    // ========================== state management =============================================
    private void refetchDoc() {
        stateDoc=xwiki.getDocument("Admin.iContactUpdaterState");
        stateObj=stateDoc.getObject("Admin.iContactUpdaterStateClass");
    }

    private Document stateDoc;
    private Object stateObj;
    private String lastUser1, lastUser2;
    public Date defaultEndDate = new Date(), defaultStartDate = new Date(System.currentTimeMillis()-24L*3600*1000);
    private List emailsToRemove = new LinkedList();
    private RevisionCriteria sinceLastTimeCriterion = null;

    private List reports = new LinkedList();

    private notifyState(Date startDate, Date endDate, String message, String saveComment, boolean isMajor) {
        LOG.warn("Notifying state: " + message);
        if (startDate==null &amp;&amp; endDate==null) startDate = new Date(0);
        if (startDate==null &amp;&amp; endDate != null) startDate = endDate;
        if (endDate==null &amp;&amp; startDate!=null) endDate = startDate;
        stateObj.set("lastUpdatedStarted", startDate);
        stateObj.set("lastUpdatedFinishDate", endDate);
        stateObj.set("lastUpdatedMessage", message);
        stateDoc.saveWithProgrammingRights(saveComment, false); // !isMajor
        refetchDoc();
    }


    // ========================== view services =============================================

    public Date getDefaultStartDate() { return defaultStartDate; }

    public Date getDefaultEndDate() { return defaultEndDate; }

    public List getReports() { return reports; }

    public java.lang.Object getLastUpdatedStarted() {
        Property prop = stateObj.getProperty("lastUpdatedStarted");
        if (prop==null) return "-";
        Date started = prop.value;
        if (started==null) return "-";
        return started;
    }
    public java.lang.Object getLastUpdatedFinished() {
        Property prop = stateObj.getProperty("lastUpdatedFinishDate");
        if (prop ==null) return "-";
        Date finished = prop.value;
        if (finished==null) return "-";
        return finished;
    }
    public java.lang.Object getLastUpdatedMessage() {
        Property p = stateObj.getProperty("lastUpdatedMessage");
        if (p==null) return "";
        if (p.value==null) return "";
        return p.value;
    }


    // ==================== iContact communication =========================================

    private HttpClient httpClient = new HttpClient();
    private SAXBuilder saxBuilder = new SAXBuilder();
    private static String baseURL = null,
                          listId = null, appId, apiUsername, apiPassword;
    private XMLOutputter outputter = createOutputter();

    private initConfig() {
        Properties props = new Properties();
        props.load(
                context.request.getHttpServletRequest().getSession(true).getServletContext().
                        getResourceAsStream("/WEB-INF/icontact_client.properties"));

        baseURL = props.get("iContact.baseAppURL");
        listId = props.get("iContact.defaultListId");
        appId = props.get("iContact.headers.appId");
        apiUsername=props.get("iContact.headers.apiUsername");
        apiPassword = props.get("iContact.headers.apiPassword");
    }

    private String zapGremlins(String s) {
        if (s ==null || s.length()==0) return "";
        StringBuffer buff = new StringBuffer(s.length());
        for (int i in 0..(s.length()-1)) {
            char c = s.charAt(i);
            if (Character.isDefined(c)) buff.append(c);
        }
        return buff.toString();
    }

    private Element postToiContact(String path, java.lang.Object msg) {
        try {
            PostMethod post = new PostMethod(baseURL + path);
            if(msg instanceof String) {
                LOG.warn("Outputting " + msg);
                post.setRequestBody((String) msg);
            } else if(msg instanceof Element) {
                OutputStream out = new FileOutputStream("/tmp/xx.xml");
                outputter.output((Element) msg, out);
                out.flush(); out.close();
                post.setRequestBody(outputter.outputString((Element) msg));
            }
            return readDocumentFromRequest(post);
        } catch (Exception ex) {
            throw new IOException("Issue at post of " + msg, ex);
        }
    }
    private Element putToiContact(String path, String msg) {
        PutMethod put = new PutMethod(baseURL + path);
        put.setRequestBody(msg);
        return readDocumentFromRequest(put);
    }
    private Element getFromiContact(String path) {
        GetMethod get = new GetMethod(baseURL + path);
        return readDocumentFromRequest(get);
    }

    private void deleteFromiContact(String path) {
        DeleteMethod delete = new DeleteMethod(baseURL + path);
        request(delete);
    }

    private void request(HttpMethod method) {
        if (method instanceof PostMethod || method instanceof PutMethod)
            method.addRequestHeader("Content-Type","text/xml;charset=utf-8");
        method.addRequestHeader("Accept", "text/xml");
        method.addRequestHeader("API-Version","2.2");
        method.addRequestHeader("API-AppId", appId);
        method.addRequestHeader("API-Username", apiUsername);
        method.addRequestHeader("API-Password", apiPassword);
        int result = httpClient.executeMethod(method);
        reports.add("- status: " + result);
        if(result!=200) {
            LineNumberReader reader = new LineNumberReader(new InputStreamReader(method.getResponseBodyAsStream(),"utf-8"));
            String line;
            while((line=reader.readLine())!=null) LOG.warn(line);
            throw new IOException("Error receiving element (status " + result + ") when on request " + method.getURI())
        };
    }

    private Element readDocumentFromRequest(HttpMethod method) {
        try {
            request(method);
        } catch (Exception ex) {
            throw new IOException("Issue with method " + method, ex);
        }
        String type = method.getResponseHeader("Content-Type").value;
        if(type==null) return null;
        if(!(type.startsWith("text/xml")))
            throw new IOException("Content-type of response is wrong: \"" + type + "\".");
        org.jdom.Document responseDoc = saxBuilder.build(method.getResponseBodyAsStream());
        return responseDoc.getRootElement();
    }

    private XMLOutputter createOutputter() {
        XMLOutputter outputter = new XMLOutputter();
        Format format = outputter.getFormat();
        format.setEncoding("utf-8");
        format.setOmitDeclaration(true);
        format.setTextMode(Format.TextMode.NORMALIZE);
        outputter.setFormat(format);
        return outputter;
    }




    // ========================== custom fields manipulation =======================

    private static List ownFields = ["curriki_username", "curriki_member_type", "curriki_country",
            "opt_out", "member_since", "affiliation"];
    private static Map subjectPropToField = new HashMap(),
                       eduLevelPropToField = new HashMap();

    public String mapCurrikiNameToCustomName(String docName, String prefix) {
        docName = docName.replaceAll("\\&amp;", "_");
        docName = docName.replaceAll("\\(", "_");
        docName = docName.replaceAll("\\)", "_");
        docName = docName.replaceAll(" ", "_");
        docName = docName.replaceAll("__", "_");
        docName = docName.replaceAll("([a-z])([A-Z])", "\$1_\$2");
        docName = prefix + docName;
        if(docName.length()&gt;20)
            docName = docName.substring(0,20);
        return docName.toLowerCase();
    }


    private void makeSureFieldsAreInitted() {
        if (!subjectPropToField.isEmpty()) return;
        for(txt in xwiki.searchDocuments("where doc.web='FW_masterFramework' order by doc.name desc")) {
            txt = txt.substring("FW_masterFramework.".length());
            subjectPropToField.put(txt, mapCurrikiNameToCustomName(txt, "subj_"));
        }
        for(txt in xwiki.curriki.getValues("CurrikiCode.AssetClass","educational_level")) {
            eduLevelPropToField.put(txt, mapCurrikiNameToCustomName(txt, "lev_"));
        }
    }
    

    public String refreshCustomFieldNames() {
        try {
            makeSureFieldsAreInitted();
            TreeSet neededFields = new TreeSet();
            neededFields.addAll(ownFields);
            neededFields.addAll(subjectPropToField.values());
            neededFields.addAll(eduLevelPropToField.values());
            Element customFields = getFromiContact("customfields/?limit=500");
            TreeSet foundCustomFields = new TreeSet();
            Iterator i = customFields.getDescendants(new ElementFilter("customFieldId"));
            while(i.hasNext()) {
                String customFieldId = (i.next()).getText();
                foundCustomFields.add(customFieldId);
            }

            Set fieldsToAdd = new TreeSet();
            fieldsToAdd.addAll(neededFields);
            fieldsToAdd.removeAll(foundCustomFields);
            Set fieldsToRemove = new TreeSet();
            fieldsToRemove.addAll(foundCustomFields);
            fieldsToRemove.removeAll(neededFields);

            for(String field in fieldsToRemove) {
                reports.add("* Deleting custom field " + field);
                try {
                    deleteFromiContact("customfields/" + field);
                } catch (Exception excep) { reports.add(excep);
                }
            }

            for(String field in fieldsToAdd) {
                String type = "text";
                reports.add("* Adding custom field " + field);
                if(field.startsWith("subj") || field.startsWith("eduLevel")) type = "checkbox";
                String msg = "&lt;customfields&gt;\n" +
                        "    &lt;customfield&gt;\n" +
                        "        &lt;privateName&gt;${field}&lt;/privateName&gt;\n" +
                        "        &lt;displayToUser&gt;0&lt;/displayToUser&gt;\n" +
                        "        &lt;fieldType&gt;${type}&lt;/fieldType&gt;\n" +
                        "    &lt;/customfield&gt;\n" +
                        "&lt;/customfields&gt;"
                postToiContact("customfields/", msg);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            reports.add(ex);
        }
        return "ok";
    }


    // ========================= update methods ======================================================
    private XPath selectOldEmails = null;

    public String updateUserToiContact(String name) {
        if (!name.startsWith("XWiki.")) name = "XWiki." + name;
        List l= Arrays.asList(name);
        updateUsersToiContact(l);
        return "OK";
    }

    public String updateGroupsUsersToiContact(String groupName) {
        Document groupDoc = xwiki.getDocument(groupName);
        List members = new LinkedList();
        LOG.warn("members: " + groupDoc);
        for (Object obj in groupDoc.getObjects("XWiki.XWikiGroups")) {
            LOG.warn("adding " + obj.getProperty("member").value)
            members.add(obj.getProperty("member").value);
        }
        return updateUsersToiContact(members);
    }


    public String updateUsersToiContact(List userNames) {
        int n=0; int max = userNames.size();
        Element uploadUserDocRoot = createUploadUserDocRoot();
        LOG.warn("Preparing to update " + userNames.size() + " users.")
        for (String userName in userNames) {
            Element userProfile = createUserProfile(userName);
            if (userProfile==null) continue;
            uploadUserDocRoot.addContent(userProfile);
            lastUser2 = lastUser1;
            lastUser1= userName;
            reports.add("added " + userName);
            n++;
            if(n % 100 == 0 || n == max) {

                if (selectOldEmails==null)
                    selectOldEmails = XPath.newInstance("./contact[oldEmail]");
                List oldEmailsElt = selectOldEmails.selectNodes(uploadUserDocRoot);
                if (oldEmailsElt!=null &amp;&amp; oldEmailsElt.size()&gt;0)
                    injectContactIdForOldEmails(oldEmailsElt);

                Element uploadResult = postToiContact("contacts/", uploadUserDocRoot);
                subscribeUploadedUsers(uploadResult);
                uploadUserDocRoot = createUploadUserDocRoot();
                reports.add("Posted.");
            }
        }
        return "OK, done " + n + ".";
    }

    private void injectContactIdForOldEmails(List contactsWithOldEmail) {
        // create a new document
        Element idObtainingDoc = createUploadUserDocRoot();

        for(Object o: contactsWithOldEmail) {
            // remove oldEmail, replace the email with oldEmail
            Element contact = o.clone();
            Element oldEmail = contact.getChild("oldEmail");
            contact.getChild("email").setText(oldEmail.getText());
            contact.removeChild("oldEmail");
            idObtainingDoc.addContent(contact);
        }
        
        // submit to iContact
        Element enrichedContacts = postToiContact("contacts/", idObtainingDoc);

        // collect contactId
        for(Element enrichedContact : enrichedContacts.getChild("contacts").getChildren("contact")) {
            // search for the contactWithOldEmail that has the same contact
            String oldEmail = enrichedContact.getChild("email").getText();
            Element contact = null;
            for(Object o: contactsWithOldEmail) {
                if (oldEmail.equals(((Element) o).getChild("oldEmail").getText())) {
                    contact = o;
                    break;
                }
            } // assume it succeeded
            // replace oldEmail with contactId
            contact.addContent((Element) (enrichedContact.getChild("contactId").clone()));
            contact.removeChild("oldEmail");
        }

    }

    public String subscribeUploadedUsers(Element uploadDoc) {
        // create subscription Document
        /* example
          &lt;subscriptions&gt; 
            &lt;subscription&gt;
                &lt;contactId&gt;66429798&lt;/contactId&gt; &lt;listId&gt;203552&lt;/listId&gt; 
                &lt;status&gt;normal&lt;/status&gt;
            &lt;/subscription&gt; 
          &lt;/subscriptions&gt;
         */
        Element listIdElt = new Element("listId");
        listIdElt.addContent(listId);
        Element statusNormal = new Element("status");
        statusNormal.addContent("normal");
        
        Element subscriptions = new Element("subscriptions");
        for (Element contactIdElt : uploadDoc.getDescendants(new ElementFilter("contactId"))) {
            //LOG.warn("subscribing contactId: " + contactIdElt.getText());
            Element subscription = new Element("subscription");
            subscriptions.addContent(subscription);
            subscription.addContent(contactIdElt.clone());
            subscription.addContent(listIdElt.clone());
            subscription.addContent(statusNormal.clone());
        }

        // then post it
        postToiContact("subscriptions", subscriptions);
    }
    
    public String uploadFromTextRequest(XWikiServletRequest request) {
        List list = new ArrayList(1003);
        LOG.warn("Request is " + request + " of class : " + request);
        Reader reader = request.getReader();
        LOG.warn("Content-Type is " + request.getContentType());
        LOG.warn("Input is " + reader + " of class : " + request.getHttpServletRequest().getReader().getClass());
        String post = IOUtils.toString(reader);
        LOG.warn("Post body is " + post);
        reader = new StringReader(post);
        LineNumberReader i = new LineNumberReader(reader);
        String line = i.readLine();
        LOG.warn("Processing massive request.");
        while( line != null) {
            list.add(line);
            line = i.readLine();
        }
        LOG.warn("Received request for " + list.size() + " user-names.");
        updateUsersToiContact(list);
        String msg = "Finished request for " + list.size() + " user-names.";
        LOG.warn(msg);
        notifyState(null, null, msg, "saving", true);
        return msg;
    }

    public String updateByDateSinceState() {
        if (stateObj == null) return "null state!";
        Property s = stateObj.getProperty("lastUpdatedStarted");
        if (s==null) return "null property!";
        Date since = (Date) s.value;
        Date to = new Date();

        return updateByDate(since, to, 20000);
    }

    public String updateByDate(String fromDate, String toDate, int maxNum) {
        Date since=new Date(fromDate);
        Date earliest = new Date(toDate);
        return updateByDate(since, earliest, maxNum);
    }



    public String updateByDate(Date since, Date endDate, int maxNum) {
        sinceLastTimeCriterion = new RevisionCriteria(null, new Period(since.getTime(), endDate.getTime()), null, false);
        Date startDate = new Date();
        notifyState(startDate, null, "Started updating by date users changed after " + since + ".\n\nNow listing users.", "starting", true);
        int numDone = 0;

        List usersList = xwiki.searchDocuments(
                ", BaseObject obj WHERE doc.fullName=obj.name AND obj.className='XWiki.XWikiUsers' AND doc.web='XWiki' AND doc.date &gt;= ?",
                maxNum, 0, [since]);

        notifyState(startDate, null, "Started updating by date users changed after " + since + ".\n\nLast users "+lastUser1 + " and " + lastUser2 + "\n\nNow uploading " + usersList.size() + " users.", "continuing", false);
        String result = updateUsersToiContact(usersList);
        notifyState(startDate, new Date(), (numDone&gt;=maxNum? "Warning: reached the limit of " + maxNum + " users to be processed. Please request a massive upload.\n" : "") + "Finished updating by date users changed after " + since + ".\n\nLast users "+lastUser1 + " and " + lastUser2 + ".\n\nUsers processed: " + usersList.size(), "finished", false);
        return result;
    }
    
    private Element createUploadUserDocRoot() {
        Element elt = new Element("contacts");
        new org.jdom.Document(elt);
        return elt;
    }
    private static DateFormat isoFormatter = new ISO8601DateFormat();
    
    private Element createUserProfile(String userName) {
        Document userDoc = xwiki.getDocument(userName);
        if (userDoc==null) return null;
        Object obj = userDoc.getObject("XWiki.XWikiUsers");
        if (obj==null) return null;
        Element contact = new Element("contact");

        if(userName.startsWith("XWiki.")) userName = userName.substring("XWiki.".length());
        addProp("curriki_username", userName, contact);
        addProp("curriki_member_type", obj.getProperty("member_type"), contact);
        addProp("email", obj.getProperty("email"), contact);
        addProp("firstName", obj.getProperty("first_name"), contact);
        addProp("lastName", obj.getProperty("last_name"), contact);
        def state = obj.getProperty("state");
        if (state!=null) state = state.value.toString();
        if (state!=null &amp;&amp; state.length()&gt;10) state = state.substring(0,10);
        addProp("state", state, contact);
        addProp("city", obj.getProperty("city"), contact);
        addProp("curriki_country", obj.getProperty("country"), contact);
        addProp("affiliation", obj.getProperty("affiliation"), contact);
        addProp("opt_out", obj.getProperty("opt_out"), contact);
        addProp("member_since", isoFormatter.format(userDoc.getCreationDate()), contact);
        if (obj.getProperty("educational_level")!=null)
            for(String v in obj.getProperty("educational_level").value) {
                addProp(mapCurrikiNameToCustomName(v, "lev_"), "1", contact);
            }
        if (obj.getProperty("topics")!=null)
            for(String v in obj.getProperty("topics").value) {
                if(v.startsWith("FW_masterFramework.")) v = v.substring("FW_masterFramework.".length());
                addProp(mapCurrikiNameToCustomName(v, "subj_"), "1", contact);
            }
        if (sinceLastTimeCriterion!=null) {
            List versions = userDoc.getRevisions(sinceLastTimeCriterion);
            List allVersions = null;
            try {
                allVersions = Arrays.asList(userDoc.getRecentRevisions(versions.size()+1))
            }catch(Exception ex){}
            if(versions!=null &amp;&amp; versions.size()&gt;0 &amp;&amp; allVersions!=null) {
                String vNum = versions.get(versions.size()-1);
                int vNumber = allVersions.indexOf(vNum);
                if (vNum!=null &amp;&amp; vNumber&lt;allVersions.size()-1) {
                    Document oldUserDoc = xwiki.getDocument(userDoc, (String) allVersions.get(vNumber+1));
                    String email = oldUserDoc.getObject("XWiki.XWikiUsers").get("email");
                    if(!email.equals(obj.getProperty("email").toString())) {
                        addProp("oldEmail", email, contact);
                        LOG.warn("changed email from " + email + " to " + obj.get("email"));
                    }
                }
            }
        }
        return contact;
    }


    private void addProp(String eltName, java.lang.Object value, Element to) {
        Element elt = new Element(eltName);
        to.addContent(elt);
        if (value instanceof Property) value = ((Property) value).value;
        if (value!=null)
            elt.addContent(zapGremlins(value.toString()));
    }
    

}</content>
</xwikidoc>

<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Registration</web>
<name>Validation</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.adminPolx</creator>
<author>XWiki.adminPolx</author>
<customClass></customClass>
<contentAuthor>XWiki.adminPolx</contentAuthor>
<creationDate>1312409679000</creationDate>
<date>1320841956000</date>
<contentUpdateDate>1320841956000</contentUpdateDate>
<version>17.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>cli-upload.</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<content>import com.xpn.xwiki.api.XWiki
import com.xpn.xwiki.api.Context
import com.xpn.xwiki.api.Document
import javax.servlet.http.HttpServletRequest

public class Validation {

    public void init(XWiki xwiki) {
        this.xwiki=xwiki;
        this.errors = null;
        this.warningFields = null;
        this.okFields = null;
    }

    public void init(XWiki xwiki, List errors, List warningFields, List okFields) {
        this.xwiki = xwiki;
        this.errors = errors;
        this.warningFields = warningFields;
        this.okFields = okFields;
    }

    private XWiki xwiki;
    private List errors;
    private List warningFields, okFields;
    private String foundAccountName = null;

    public void zapErrors() {
        errors.clear();
    }

    public boolean isValidUsername(String account, boolean echoErrors) {
        if (account.length()&gt;=3 &amp;&amp; account.replaceAll("[a-zA-Z0-9]","").equals("")) {
            if (xwiki.exists("XWiki.${account}") || "superadmin".equals("${account}")) {
                if(echoErrors &amp;&amp; warningFields!=null) {
                    addError("join.error.login_not_unique");
                    addWarning("username");
                }
                return false;
            } else {
                addOk("username");
                return true;
            }
        }
        else {
            addWarning("username");
            if(echoErrors) errors.add("join.error.username");
            return false;
        }
    }


    public boolean isValidEmail(String email, boolean echoErrors) {
        if("paul@hoplahup.net"==email || "polx@i2geo.net"==email || "paul@activemath.org"==email) return true;
        def atIndex = email.indexOf("@");
        if(email==null || email.length()==0 || atIndex==-1) {
            addWarning("email");
            if(echoErrors) addError("join.error.email_invalid");
        }


        // Check to see if the email address is already used
        def query = ",BaseObject as obj, StringProperty as prop where doc.fullName=obj.name and obj.className='XWiki.XWikiUsers' and obj.id=prop.id.id and prop.id.name='email' and prop.value='"+email+"'";
        List docs = xwiki.searchDocuments(query);
        if (!docs.isEmpty()) {
            foundAccountName = docs.get(0);
            System.out.println("Found user: " + foundAccountName);
            addWarning("email");
            addError("join.error.email_not_unique");
            return false;
        }

        // We should make this a bit better...
        if (echoErrors &amp;&amp; (atIndex &lt; 1) || (email.lastIndexOf(".") &lt;= (atIndex+1)) || (email.length() &lt;= (email.lastIndexOf(".") + 1)) || (email.lastIndexOf("@") != atIndex) || !email.matches("[a-zA-Z0-9_+=\\.-]+@([a-zA-Z0-9-]+[\\.])+([a-zA-Z]){2,4}")) {
            addError("join.error.email_invalid");
            addWarning("email");
            return false;
        }
        addOk("email");
        return true;
    }

    public boolean isValidPassword(String ps, boolean echoErrors ) {
        if(ps!=null &amp;&amp; ps.length()&gt;4 &amp;&amp; !ps.contains(" ")) {
            addOk("password");
            return true
        };
        if(echoErrors)
            addError("join.error.password_invalid");
        addWarning("password");
        return false;
    }

    public boolean isValidFirstName(String name, boolean echoErrors) {
        if(name!=null &amp;&amp; name.length()&gt;=1 &amp;&amp; name.length()&lt;32 ) {
            addOk("firstName");
            return true
        };
        if(echoErrors)
            addError("join.error.fname1_long");
        addWarning("firstName");
        return false;
    }

    public boolean isValidLastName(String name, boolean echoErrors) {
        if(name!=null &amp;&amp; name.length()&gt;=1 &amp;&amp; name.length()&lt;32 ) {
            addOk("lastName");
            return true
        };
        if(echoErrors)
            addError("join.error.lname1_long");
        addWarning("lastName");
        return false;
    }

    public boolean isValidMemberType(String ps, boolean echoErrors) {
        if(ps!=null &amp;&amp; ps.length()&gt;4 &amp;&amp; !ps.contains(" ")) {
            addOk("memberType");
            return true
        };
        if(echoErrors)
            addError("join.error.membership_type");
        addWarning("memberType");
        return false;
    }

    public boolean isValidAgree(String ag, boolean echoErrors) {
        if(ag!=null &amp;&amp;
                (ag.equalsIgnoreCase("on") || ag.equalsIgnoreCase("true") || ag.equalsIgnoreCase("checked"))) {
            addOk("agree");
            return true;
        };
        if(echoErrors)
            addError("join.error.policy");
        addWarning("agree");
        return false;
    }


    private void addWarning(String warning) {
        if(warningFields!=null) warningFields.add(warning);
    }

    private void addOk(String ok) {
        if(okFields!=null) okFields.add(ok);
    }
    private void addError(String error) {
        if(errors!=null) errors.add(error);
    }

    public void activateUser(Context context) {
        // context.context.put("ajax",true)
        Document userDoc = xwiki.getDocument(context.user);
        com.xpn.xwiki.api.Object userObj = userDoc.getObject("XWiki.XWikiUsers")
        //#set($result = $reg.validateUser(true))

        //xwiki.checkAuth(userObj.getProperty("password").value, "false");
        userObj.set("active", "1");
        userObj.set("email_undeliverable", "0");
        userDoc.save();
    }


    public boolean checkValidationKey(HttpServletRequest request, String username) {
        Document userDoc = xwiki.getDocument(username);
        com.xpn.xwiki.api.Object userObj = userDoc.getObject("XWiki.XWikiUsers")
        String receivedKey = request.getParameter("validkey");
        if(receivedKey==null) {
            System.out.println("Warning: empty validkey.");
            return false
        };
        boolean passed = receivedKey.trim().equals(userObj.getProperty("validkey").value);
        if(passed) System.out.println("passing validation for user " + username);
        else System.out.println("Failed validation for user " + username + " with request " + request + " from " + request.getRemoteHost());
        return passed;
    }
}</content>
</xwikidoc>

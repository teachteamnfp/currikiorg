<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Registration</web>
<name>TargetsGroovy</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.adminPolx</creator>
<author>XWiki.adminPolx</author>
<customClass></customClass>
<contentAuthor>XWiki.adminPolx</contentAuthor>
<creationDate>1314118673000</creationDate>
<date>1320846001000</date>
<contentUpdateDate>1320846001000</contentUpdateDate>
<version>46.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>cli-upload.</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<content>import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpSession
import com.xpn.xwiki.web.SavedRequestRestorerFilter
import com.xpn.xwiki.api.XWiki
import javax.servlet.http.HttpSession
import javax.servlet.http.HttpServletRequestWrapper
import java.util.regex.Pattern
import java.util.regex.Matcher
import javax.servlet.http.HttpServletResponse;

/*
  This page is a class used in RegistrationBootstrap and LoginOrRegister to be able
  to track the URL target after the successful and unsuccessful logins.
  Basically, it reads all the params and session and flattens it so that
  session.xredirect is the desired target and session.failedredirect is
  the one in case one fails to login.

  The interest of keeping things in session is that another request
  can start and re-running this tool will give the same.
*/

public class TargetsGroovy {

    String afterLogin = "/xwiki/bin/view/MyCurriki/";
    String noLogin    = "/";
    HttpServletRequest request;
    static String SAVED_REQUEST_ATTNAME="com.xpn.xwiki.web.SavedRequestRestorerFilter.SavedRequest_SavedRequests";
    

    public void init(HttpServletRequest req, XWiki xwiki) {
        System.out.println("Request to " + req.getRequestURI())
        System.out.println("  - " + req.getParameterMap())
        System.out.println("  - xwiki: " + xwiki.getXWiki())
        this.request = req;
        // find out afterLogin
        HttpSession session = req.getSession(true);
        String referer = req.getHeader("Referer");
        String refererPath = null;
        try {
            String hostname = xwiki.xWiki==null ? null : xwiki.xWiki.Param('curriki.system.hostname', 'broken-url');
            if(referer!=null &amp;&amp; referer.startsWith("http://" + hostname))
                refererPath = referer.substring(7+referer.substring(7).indexOf('/'));
            def redirectMap = session.getAttribute(SAVED_REQUEST_ATTNAME);

            // care for srid in request and
            if(req.srid
                    &amp;&amp; (redirectMap instanceof Map &amp;&amp; redirectMap.containsKey(req.srid)
                    || redirectMap instanceof SavedRequestRestorerFilter.SavedRequest)) {
                afterLogin = readSrid(redirectMap, req.srid);
            }
            // care for xredirect in request
            else if (req.xredirect &amp;&amp; ! req.xredirect.contains("/xwiki/bin/view/Registration/") &amp;&amp; !req.xredirect.contains("/xwiki/bin/view/GCheckout/") &amp;&amp; !req.xredirect.contains("/login/") &amp;&amp; !req.xredirect.contains("logout") ) {
                afterLogin = req.xredirect;
            }

            // care for srid in session
            else if (session.getAttribute("srid")) {
                def o = session.getAttribute("srid");
                afterLogin = readSrid(o, null);
            }
            // care for xredirect in session
            else if (session.getAttribute("xredirect")) {
                afterLogin = session.getAttribute("xredirect");
            }

            // make host absolute
            if(afterLogin.startsWith("http://" + hostname))
                afterLogin = afterLogin.substring(("http://" + hostname).length());

            // special cases?
            // no redirect outside here
            //System.out.println("aferlogin now is " + afterLogin);
            if(! (afterLogin.startsWith("/xwiki/bin/"))) {
                afterLogin = "/"
                System.out.println("Zapped it to /.");
            };
            else if(afterLogin.startsWith("/xwiki/bin/view/XWiki/XWikiLogin")) afterLogin = "/";
            // login from home or any page in space Main =&gt; go to MyCurriki
            //System.out.println("RefererPath is " + refererPath);

            afterLogin = outOfJump(afterLogin);
            if(afterLogin.startsWith("/xwiki/bin/view/Main/") ||
                    afterLogin.startsWith("/xwiki/bin/view/Registration/") ||
                    afterLogin.startsWith("/xwiki/bin/view/GCheckout/") ||
                    afterLogin.startsWith("/xwiki/bin/login") ||
                     refererPath=="/") {
                afterLogin = "/xwiki/bin/view/MyCurriki/";
            }


            // find out noLogin
            // desired target is public-readable and not MyCurriki... use it
            System.err.println("refererpath: " + refererPath);
            if(session.getAttribute("nologin"))
                noLogin = session.getAttribute("nologin");
            else if(refererPath !=null &amp;&amp; refererPath.startsWith("/xwiki/bin/")) {
                int s = refererPath.indexOf("/", 16); // 16 = "/xwiki/bin/view/".length() + 1
                int t = refererPath.indexOf("/", s+1);
                //System.out.println("S: " + s + ", T: " + t);
                if(t==-1) t = refererPath.length();
                String docName = refererPath.substring(16, s) + "." + refererPath.substring(s+1,t);
                System.out.println("Checking auth for document " + docName);
                if(xwiki.hasAccessLevel("view","XWiki.XWikiGuest",docName))
                    noLogin = refererPath;
            } else {
                noLogin = refererPath;
            }
            noLogin = outOfJump(noLogin);
            if(noLogin.startsWith("/xwiki/bin/view/Registration/") ||
                    noLogin.startsWith("/xwiki/bin/view/GCheckout/") ||
                    noLogin.startsWith("/xwiki/bin/login")  )
                noLogin="/";
            if(noLogin=="/" &amp;&amp; afterLogin.startsWith("/xwiki/bin/view/")) {
                if (!(afterLogin.contains("MyCurriki"))) {
                    String targetDocName = afterLogin.replaceAll("/xwiki/bin/[a-z]+/","")
                    if(targetDocName.contains("?")) targetDocName = targetDocName.substring(targetDocName.indexOf("?"))
                    targetDocName = targetDocName.replaceAll("/",".")
                    if(xwiki.checkAccess(targetDocName, "view")) noLogin = "/xwiki/bin/view/" + targetDocName.replaceAll("\\.","/")
                };
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        };

        // last check
        if(afterLogin==null || afterLogin.length()==0 || afterLogin.startsWith("/xwiki/bin/view/Registration/") || afterLogin.startsWith("/xwiki/bin/view/GCheckout/")) afterLogin = "/xwiki/bin/view/MyCurriki/";
        if(noLogin==null || noLogin.length()==0) noLogin = "/";

        // write in session
        System.out.println("Targets initted: afterLogin: " + afterLogin + ", noLogin: " + noLogin);
        session.setAttribute("xredirect", afterLogin);
        session.setAttribute("nologin", noLogin);
    }

    private String outOfJump(String from) {
        if(from==null) return null;
        if(from.startsWith("/xwiki/bin/view/Registration/Jump")) {
            def m=Pattern.compile(".*redir=([^?&amp;]*)\\&amp;?.*").matcher(from);
            if(m.matches()) {
                return URLDecoder.decode(m.group(1));
            }
        }
        return from;
    }

    public String createSrid(HttpServletRequest req, String to) {
        HttpSession session = req.getSession(true);
        def o = session.getAttribute(SAVED_REQUEST_ATTNAME);
        def srid = req.getParameter("srid");
        Map map;
        if(o instanceof Map) map = (Map) o; else map = new HashMap();
        if(srid==null) { // invent one that's not in the map
            while(srid==null || map!=null &amp;&amp; map.containsKey(srid) )
                srid = "" + ((int) (Math.random()*2000))
        };
        HttpServletRequest req2 = new MyRequestWrapper(req, to);
        def sri = new SavedRequestRestorerFilter.SavedRequest(req2);
        if(o != null &amp;&amp; o instanceof SavedRequestRestorerFilter.SavedRequest) {
            o = sri;
        }
        if(o==null) o = map;
        if(o instanceof Map) ((Map) o).put(srid, sri);
        session.setAttribute(SAVED_REQUEST_ATTNAME, o);
        return srid;
    }

    private String readSrid(def o, String sridParam) {
        if(o instanceof Map) {
            if(sridParam!=null) o = ((Map) o).get(sridParam)
            else o = ((Map) o).values().next();
        }
        return  ((SavedRequestRestorerFilter.SavedRequest) o).requestUrl;
    }

    public void cleanupTargets(HttpSession session) {
        if(session!=null) {
            session.removeAttribute("xredirect");
            session.removeAttribute("nologin");
        }
    }



    Pattern pattern = null;

    private Pattern getOrMakeDownloadPattern() {
        if(pattern==null)
            pattern = Pattern.compile("(.*)/xwiki/bin/download/([^/]+)/([^/&amp;]+)\\??.*force(.?.?.)download=1.*");
        return pattern;
    }

    public boolean isDownloadLink(String l) {
        if(l==null) return false;
        return getOrMakeDownloadPattern().matcher(l).matches();
    }

    public String fromDownloadToResourceOrSelf(String t) {
        System.out.println("Evaluating for download: " + t);
        if(t==null) return "/";
        Matcher m = getOrMakeDownloadPattern().matcher(t);
        System.out.println("Matches?: " + m.matches());
        if(m.matches()) {
            return "/xwiki/bin/view/" + m.group(2) + "/" + m.group(3);
        } else
            return t;
    }

    public void storeFileToDownload() {
        request.getSession().setAttribute("downloadSoon", afterLogin);
    }

    public String cleanLogout(HttpServletRequest request, HttpServletResponse response) {
        String xredirect = request.getParameter("xredirect");
        try {
            System.err.println("Logging out user " + request.getSession().getAttribute("org.securityfilter.filter.SecurityRequestWrapper.PRINCIPAL"));
            if(xredirect==null || xredirect.length()==0) xredirect = "/"
            if(request.getSession()==null) {
                response.sendRedirect(xredirect);
                return;
            }
            HttpSession session = request.getSession();

            String idProviderName = session.getAttribute("org.brickred.socialauth.AuthProvider.hint");
            List l = new LinkedList();
            for(att in session.getAttributeNames()) {
                l.add(att);
            }
            for(String n in l) session.removeAttribute(n);
            session.setAttribute("header.message","logout-ok");
            session.setAttribute("curriki.analytics.toLogView","/join/"+
                    ( idProviderName==null ? "inCurriki" : idProviderName)
                    +"/logout");
            if(idProviderName!=null) session.setAttribute("header.idProviderName", idProviderName);
            response.sendRedirect("/xwiki/bin/logout/XWiki/XWikiLogout?xredirect=" + URLEncoder.encode(xredirect));
            // debug: response.sendRedirect("/xwiki/bin/view/Registration/SessionAttributes");
            return "true";
        } catch (Exception ex) {
            ex.printStackTrace();
            return "false";
        };
    }
}


public class MyRequestWrapper extends HttpServletRequestWrapper {
    public MyRequestWrapper(HttpServletRequest req, String afterLogin) {
        super(req);
        this.afterLogin = afterLogin;
    }
    String afterLogin;
    public StringBuffer getRequestURL() {
        return new StringBuffer(afterLogin);
    }
}
</content></xwikidoc>
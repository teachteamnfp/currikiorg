<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Search2</web>
<name>DocChangeListener</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.adminPolx</creator>
<author>XWiki.adminPolx</author>
<customClass></customClass>
<contentAuthor>XWiki.adminPolx</contentAuthor>
<creationDate>1298699901000</creationDate>
<date>1303332509000</date>
<contentUpdateDate>1303332509000</contentUpdateDate>
<version>7.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>threading the call to indexer with a timeout of 10 seconds.</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Search2.DocChangeListener</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<content>/* Groovy Class #* */

import com.xpn.xwiki.api.*;
import com.xpn.xwiki.notify.*;
import com.xpn.xwiki.*;
import com.xpn.xwiki.doc.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory
import com.xpn.xwiki.objects.BaseObject

public class DocChangeListener implements XWikiDocChangeNotificationInterface, XWikiActionNotificationInterface
{

    URL indexerNotifyURL = new URL("http://dev-current-web:8080/indexer/notify");
     // http://atlas:8080/indexer/notify
    // http://dev-current-web:8080/indexer/notify
    // FIXME: need to adjust this one

    static Log LOG = LogFactory.getLog("groovypages.DocChangeListener");
    static boolean DEBUG = LOG.isDebugEnabled();
    Set namesTriggeringCompleteUsersContributionsReindex = new HashSet(["first_name","last_name","displayTitle"])
    Set namesTriggeringCompleteCollectionReindexing = new HashSet(["educational_level", "fw_items",  "instructional_component", "description", "displayTitle","rights"]);

    com.xpn.xwiki.XWiki xwiki;
    DocChangeRule rule;

    public DocChangeListener()
    {
        this.rule = new DocChangeRule(this);
        LOG.getLogger().setLevel(org.apache.log4j.Level.DEBUG);
    }

    public void init(com.xpn.xwiki.XWiki xwiki)
    {
        LOG.info( "DocChangeListener (" + this + ") starting.");
        this.xwiki = xwiki;
        xwiki.getNotificationManager().addGeneralRule(this.rule);
        LOG.info("DocChangeListener ("+ this+") started.");
    }
    public void stop()
    {
        xwiki.getNotificationManager().removeGeneralRule(this.rule);
        LOG.info("DocChangeListener ("+ this + ") stopped.");
    }

    public void notify(XWikiNotificationRule rule, XWikiDocument doc, java.lang.String action, XWikiContext context) {
        // useless in principle
    }


    private String toStringAndClass(def o) {
        if(o==null) return "null";
        try {
            return o.toString() + " (of class " + o.getClass().name + ")";
        } catch(Exception ex) {
            return "&lt;broken-to-string&gt; (of class " + o.getClass().name + ")";
        }
    }

    public void notify(XWikiNotificationRule rule, XWikiDocument newdoc, XWikiDocument olddoc,
                       int event, XWikiContext context) {
        LOG.debug("notify from XWikiDocChangeNotificationInterface, event=" + event
                + ", newDoc=" + toStringAndClass(newdoc) + " oldDoc=" + toStringAndClass(olddoc));
        if(newdoc == null &amp;&amp; olddoc == null) return;
        try {
            URL u = null;
            XWikiDocument doc = null;
            boolean isDeletion = false;
            if(newdoc ==null || newdoc instanceof DeletedDocument || !xwiki.exists(newdoc.fullName, context)) {
                doc = olddoc;
                isDeletion = true;
            } else {
                doc = newdoc;
            }
            if("AssetTemp"==doc.getWeb() || "WebHome".equals(doc.getName()) || "Favorites".equals(doc.getName())) return;

            // request update of all "related" pages:
            Set relatedPages = new HashSet();
            relatedPages.add(doc.fullName);

            // compute diff field names
            Set changedFields = new HashSet();
            boolean oneMissing = newdoc==null || olddoc == null;
            if(newdoc != null &amp;&amp; olddoc!=null &amp;&amp; !isDeletion) {
                String version = olddoc.getVersion();
                LOG.info("Comparing version : " + newdoc.version + " to " + olddoc.version);
                for(MetaDataDiff diff in newdoc.getMetaDataDiff(version,context)) {
                    if(DEBUG) LOG.debug("Candidate changedField: " + diff.field);
                    String newValue = newdoc.getStringValue(diff.field), oldValue=olddoc.getStringValue(diff.field);
                    if((newValue==null &amp;&amp; oldValue!=null) || (newValue!=null &amp;&amp; ! (newValue.equals(oldValue))))
                        changedFields.add(diff.field);
                }
            }
            // diffs seem badly obtained, checking again by hand for important fields
            if(newdoc.getDisplayTitle(context) != olddoc.getDisplayTitle(context))
                changedFields.add("displayTitle");
            if(hasDiff("CurrikiCode.AssetClass","educational_level", olddoc,newdoc)) changedFields.add("educational_level");
            if(hasDiff("CurrikiCode.AssetClass","fw_items", olddoc,newdoc)) changedFields.add("fw_items");
            if(hasDiff("CurrikiCode.AssetClass","instructional_component", olddoc,newdoc)) changedFields.add("instructional_component");
            if(hasDiff("CurrikiCode.AssetClass","description", olddoc,newdoc)) changedFields.add("description");

            if(hasDiff("XWiki.XWikiUsers","first_name", olddoc,newdoc)) changedFields.add("first_name");
            if(hasDiff("XWiki.XWikiUsers","last_name", olddoc,newdoc)) changedFields.add("last_name");

            if(hasDiff("XWiki.SpaceClass","displayTitle", olddoc,newdoc)) changedFields.add("displayTitle");

            LOG.info("changed Fields: " + changedFields);

            // if a user who changed one of his names... index his contributions
            BaseObject userObject = newdoc.getObject("XWiki.XWikiUsers");
            if(userObject==null) userObject=olddoc.getObject("XWiki.XWikiUsers");
            if(userObject!=null &amp;&amp; hasIntersection(changedFields,namesTriggeringCompleteUsersContributionsReindex)  || oneMissing) {
                String fullName;
                if(newdoc==null) fullName = olddoc.fullName; else fullName = newdoc.fullName;
                def hql = "select distinct doc.space, doc.name from XWikiDocument doc, BaseObject as obj where doc.fullName=obj.name AND obj.className='CurrikiCode.AssetClass' AND (doc.creator='"+fullName+"' or doc.author='"+ fullName+"')  AND doc.web != 'AssetTemp' AND doc.name != 'Favorites' AND doc.name != 'WebHome' AND doc.fullName NOT IN (SELECT cbobj.name FROM BaseObject as cbobj, IntegerProperty as cbprop WHERE cbobj.className='CurrikiCode.TextAssetClass' AND cbobj.name = doc.fullName AND cbobj.id=cbprop.id.id AND cbprop.id.name='type' AND cbprop.value=2)"
                for(f in xwiki.search(hql, context)) {
                    if(DEBUG) LOG.debug("Adding " + f)
                    relatedPages.add(f);
                }
            }

            // if a group changed name, re-index all of its resources
            if(doc.fullName.startsWith("Group_") &amp;&amp; doc.name=="WebPreferences" &amp;&amp; changedFields.contains("displayTitle")) {
                def hql = "select doc.space, doc.name from XWikiDocument as doc, BaseObject as obj where doc.fullName=obj.name AND obj.className='CurrikiCode.AssetClass' AND doc.web='Coll_"+ doc.web +"'";
                for(f in xwiki.search(hql, context)) {
                    if(DEBUG) LOG.debug("Adding " + f)
                    relatedPages.add(f);
                }
            }


            // if a collection gets changed... index its changed parts
            BaseObject composite = newdoc.getObject("CurrikiCode.CompositeAssetClass");
            if(composite==null) composite = olddoc.getObject("CurrikiCode.CompositeAssetClass");
            if(composite!=null ) { // &amp;&amp; changedFields.contains("title")
                // re-index all contents: collect from old and new
                HashSet pagesInOld = listCollection(newdoc), pagesInNew = listCollection(olddoc);

                // remove those that are both sides unless it was a relevant info change
                if(!hasIntersection(changedFields,namesTriggeringCompleteCollectionReindexing)) {
                    def r = new HashSet(pagesInOld);
                    pagesInOld.removeAll(pagesInNew);
                    pagesInNew.removeAll(r);
                }
                relatedPages.addAll(pagesInOld);
                relatedPages.addAll(pagesInNew);
                relatedPages.add(doc.fullName);
                LOG.info("Related pages: " + relatedPages);
            }

            // now index all the related pages
            def th = Thread.start {
                for(String pageFullName in relatedPages) {
                    u = new URL(indexerNotifyURL,"notify/updated?doc=" + pageFullName)
                    LOG.info("Calling indexer-update " + u)
                    URLConnection conn = u.openConnection();
                    conn.setReadTimeout(10000);
                    def result = conn.getContent();
                    if(result instanceof sun.net.www.content.text.PlainTextInputStream) {
                        sun.net.www.content.text.PlainTextInputStream stream = (sun.net.www.content.text.PlainTextInputStream) result;
                        StringBuffer buff = new StringBuffer();
                        int r = 0;
                        while((r=stream.read())!=-1) buff.append((char) r);
                        result = buff.toString();
                    }
                    LOG.info("Result \"" + result + "\".")
                }
            }
        } catch (Exception ex) {
            LOG.warn("Trouble for indexing " + newdoc,ex);
        }
    }

    boolean hasIntersection(Set a, Set b) {
        for(Object o in a)
            if(b.contains(o)) return true;
        for(Object o in b)
            if(a.contains(o)) return true;
        return false;
    }

    boolean hasDiff(String className, String fieldName, XWikiDocument olddoc, XWikiDocument newdoc) {
        boolean result = hasDiff2(className, fieldName, olddoc, newdoc);
        if(DEBUG) LOG.debug("Diffed for field " + fieldName + " result " + result);
        return result;
    }
    boolean hasDiff2(String className, String fieldName, XWikiDocument olddoc, XWikiDocument newdoc) {
        // case zero doc created or deleted
        if(olddoc==null || newdoc==null || newdoc instanceof DeletedDocument) return true;

        BaseObject[] oldobjs = olddoc.getObjects(className);
        BaseObject[] newobjs = newdoc.getObjects(className);

        // case one, object created or deleted
        if(oldobjs==null &amp;&amp; newobjs==null)
            return false;
        if(oldobjs==null || oldobjs.length==0 || newobjs==null || newobjs.length==0)
            return true;

        if(DEBUG) LOG.debug("Now comparing values");
        // collect values
        List oldvalues = new ArrayList();
        for(BaseObject obj in oldobjs) {
            String value = obj.getStringValue(fieldName);
            if(value ==null) continue;
            oldvalues.add(value);
        }
        List newvalues = new ArrayList();
        for(BaseObject obj in newobjs) {
            String value = obj.getStringValue(fieldName);
            if(value==null) continue;
            newvalues.add(value);
        }

        // now apply collection diff-o=sca
        if(DEBUG) LOG.debug("Comparing &lt;" + oldvalues + "&gt; to &lt;" + newvalues + "&gt;: equal?" + oldvalues.equals(newvalues) );
        return !(oldvalues.equals(newvalues));
    }

    public java.util.Collection listCollection(XWikiDocument doc) {
        Set h = new HashSet();
        List objs = doc.getObjects("CurrikiCode.SubAssetClass");
        if(objs!=null) for(BaseObject obj in objs) {
            if(obj==null) continue;
            String page = obj.getStringValue("assetpage");
            h.add(page);
        }
        return h;
    }
}

/* *# */


</content></xwikidoc>
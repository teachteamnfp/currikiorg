<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Search2</web>
<name>SOLRExtractorGroovy</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.adminPolx</creator>
<author>XWiki.adminPolx</author>
<customClass></customClass>
<contentAuthor>XWiki.adminPolx</contentAuthor>
<creationDate>1298699908000</creationDate>
<date>1304975842000</date>
<contentUpdateDate>1304975842000</contentUpdateDate>
<version>52.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>cli-upload.</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Search2.SOLRExtractorGroovy</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<content>// Groovy class #*
import com.xpn.xwiki.api.Context
import com.xpn.xwiki.api.XWiki
import com.xpn.xwiki.api.Document
import org.curriki.xwiki.plugin.asset.Asset
import com.xpn.xwiki.api.Attachment
import java.text.SimpleDateFormat
import javax.swing.text.html.HTMLEditorKit
import javax.swing.text.html.parser.ParserDelegator
import java.util.regex.Pattern
import java.util.regex.Matcher

// Groovy class

public class SOLRExtractorGroovy {

    public boolean hasAccess() { return xwiki.checkAccess(docFullName, "view"); }

    public void init(XWiki xwiki, Context context, String docFullName) {
        this.xwiki = xwiki;
        this.context = context;
        this.docFullName = docFullName;
        if(docFullName!=null &amp;&amp; docFullName.indexOf('/')&gt;0) docFullName= docFullName.replaceAll('/','.');
        if(hasAccess()) {
            this.doc = xwiki.getDocument(docFullName);
            def assetObject = doc.getObject("CurrikiCode.AssetClass", false);
            if(assetObject!=null)
                this.asset = xwiki.curriki.fetchAsset(docFullName);
        }
        try {
            if(xwiki.xWiki.Param('curriki.system.hostname', 'nowhere').endsWith("curriki.org")) {
                def fetcher = xwiki.parseGroovyFromPage("Search2.ABFetcher")
                fetcher.init(context)
                alignments = fetcher.getAlignments(docFullName)
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        };

    }

    XWiki xwiki;
    Context context;
    String docFullName;
    Document doc;
    Asset asset;
    List alignments;
    List parentList = null;

    private static ThreadLocal formatter = new FormatterThreadLocal();

    static int LENGTH_OF_COLL_PREFIX = "Coll_".length(),
        LENGTH_OF_COLL_GROUP_PREFIX = "Coll_group_".length();


    public boolean isApplicable() {
        // 1 != asset.getValue("hidden_from_search") &amp;&amp;
        return doc!=null &amp;&amp; asset!=null &amp;&amp;
                doc.web!="Coll_Templates" &amp;&amp;
                doc.name!="WebHome" &amp;&amp; doc.name != "Favorites";
    }


    public String getFullNameForComments() { return docFullName.replaceAll('--','- -'); }
    
    public String getFullNameX() { return xmlEncode(docFullName); }
    public String getNameX() { return xmlEncode(doc.name);}
    public String getWebX() { return xmlEncode(doc.web);}

    public String getAuthorCodeX() { return xmlEncode(doc.author.substring(6)); }
    public String getAuthorX() { return xmlEncode(xwiki.getUserName(doc.author, false)); }

    public String getCreatorCodeX() { return xmlEncode(doc.creator.substring(6)); }
    public String getCreatorX() { return xmlEncode(xwiki.getUserName(doc.creator, false)); }

    public String getTitleX() { return xmlEncode(asset.getDisplayTitle()); }
    public String getDescriptionX() {
        String text = getTextOfHtml(xwiki.renderText(asset.getDescription(), asset));
        return xmlEncode(text);
    }

    public String getHiddenFromSearch() {
        if(asset.getValue("hidden_from_search")==1) return "true" else return "false";
    }

    public List getICTs() {
        return (List) asset.getValue("instructional_component");
    }

    public String getLanguage() {
        return asset.getValue("language");
    }
    
    public List getLevels() {
        return (List) asset.getValue("educational_level");
    }

    public List getSubjects() {
        return (List) asset.getValue("fw_items");
    }


    public String getKeywords() {
        // TODO: check-me that it works!
        return asset.getValue("keywords");
    }
    public String getGeneratedKeywords() {
        return asset.getValue("generated_keywords");
    }

    public String getRenderedContentX() {
        return xmlEncode(getTextOfHtml(asset.getRenderedContent()));
    }

    public String getAssetType() {
        return asset.getAssetType();
    }

    public String getCategory() {
        return asset.getCategory();
    }

    public String getSubCategory() {
        return asset.getCategorySubtype();
    }

    public List getAttachmentTypes() {
        String fileType1 = asset.getFiletype();
        if(fileType1!=null) {
            return [fileType1];
        }
        List l = new ArrayList();
        for(Attachment attach in doc.attachmentList) {
            String filename = attach.filename;
            if(filename!=null &amp;&amp; filename.contains(".")) {
                int p = filename.lastIndexOf(".");
                if(p&gt;-1 &amp;&amp; p+1&lt;filename.length()) 
                    l.add(filename.substring(p+1).toLowerCase());
            }
        }
        return l;
    }

    public List getAttachmentFilenames() {
        List l = new ArrayList();
        for(Attachment attach in doc.attachmentList) {
            String filename = attach.filename;
            if(filename!=null)
                l.add(filename);
        }
        return l;
    }

    public String getModificationDate() {
        return formatter.get().format(doc.contentUpdateDate);
    }

    public String getCreationDate() {
        return formatter.get().format(doc.creationDate);
    }

    public boolean hasAttachment() {
        return asset.getCategory()!=null &amp;&amp; asset.getCategory()!="" || !doc.attachmentList.empty;
    }

    public String getRights() {
        return asset.getValue("rights");
    }

    public String getLicense() {
        def obj = doc.getObject("CurrikiCode.AssetLicenseClass");
        if(obj!=null)
            return obj.getProperty("licenseType").value;
        else return "";
    }

    public String getPrivateToUser() {
        String rights = asset.getValue("rights");
        if("private"==rights) {
            if(!docFullName.startsWith("Coll_Group_")) {
                return doc.web.substring(LENGTH_OF_COLL_PREFIX);
            }
        }
        return "";
    }

    public String getPrivateToGroups() {
        String rights = asset.getValue("rights");
        if("private"==rights) {
            if(docFullName.startsWith("Coll_Group_")) {
                return doc.web.substring(LENGTH_OF_COLL_GROUP_PREFIX);
            }
        }
        return "";
    }

    public String getFileCheckStatus() {
        return asset.getValue("fcstatus");
    }

    public String getCurrikiReviewStatus() {
        def obj = doc.getObject("CRS.CurrikiReviewStatusClass");
        if(obj!=null &amp;&amp; obj.getProperty("status")!=null)
            return obj.getProperty("status").value;
        else return "";
    }

    public String getUsersRating() {
        def obj= doc.getObject("CurrikiCode.AssetClass");
        if(obj!=null &amp;&amp; obj.getProperty("rating")!=null)
            return obj.getProperty("rating").getValue();
        else return "";
    }

    public String getUsersRatingCount() {
        def obj= doc.getObject("CurrikiCode.AssetClass");
        if(obj!=null &amp;&amp; obj.getProperty("rating_count")!=null)
            return obj.getProperty("rating_count").getValue();
        else return "";
    }

    public String getRevisionNumber() {
        return doc.getVersion();
    }

    public List getInCollection() {
        if(this.parentList!=null) return this.parentList;
        String hql = ", BaseObject as composite, BaseObject as subasset, StringProperty as cprops, StringProperty as sprops where doc.name != 'Favorites' and doc.name != 'WebHome' and composite.name=doc.fullName and composite.className='CurrikiCode.CompositeAssetClass' and composite.id=cprops.id.id and cprops.id.name='type' and (cprops.value='collection' or cprops.value='folder') and subasset.name=doc.fullName and subasset.id=sprops.id.id and subasset.className='CurrikiCode.SubAssetClass' and sprops.id.name='assetpage' and sprops.value='"+ docFullName +"' order by doc.name";
        this.parentList = xwiki.searchDocuments(hql);
        return parentList;
    }

    public List getInCollectionRights() {
        List l = getInCollection();
        ArrayList inCollectionRights = new ArrayList(l.size());
        for(String docFullName in l) {
            Document doc = xwiki.getDocument(docFullName);
            def assetObject = doc.getObject("CurrikiCode.AssetClass", false);
            if(assetObject==null) continue;
            Asset asset = xwiki.curriki.fetchAsset(docFullName);
            String rights = asset.getValue("rights");
            if("members".equals(rights) || "public".equals(rights))
                inCollectionRights.add(rights);
            else {
                int p = docFullName.indexOf('.');
                System.out.println("docFullName: " + docFullName);
                String space = p&gt;-1 ? docFullName.substring(0,p) : docFullName;
                System.out.println("p: " + p);
                System.out.println("space: " + space);
                inCollectionRights.add("private:" + space.substring(5)); // 5 = "Coll_".length()
            }
        }
        return inCollectionRights;
    }

    public List getInCollectionDetailsJSON() {
        // ported from Search.Resources velocity code
        //if(asset.isCollection()) return [];
        String hql = ", BaseObject as composite, BaseObject as subasset, StringProperty as cprops, StringProperty as sprops where doc.name != 'Favorites' and doc.name != 'WebHome' and composite.name=doc.fullName and composite.className='CurrikiCode.CompositeAssetClass' and composite.id=cprops.id.id and cprops.id.name='type' and (cprops.value='collection' or cprops.value='folder') and subasset.name=doc.fullName and subasset.id=sprops.id.id and subasset.className='CurrikiCode.SubAssetClass' and sprops.id.name='assetpage' and sprops.value='"+ docFullName +"' order by doc.name";
        List parentList = xwiki.searchDocuments(hql);
        if(parentList.isEmpty()) {
            return [];
        } else {
            // TODO: add inCollectionPrivateTo
            // TODO: properly JSON-encode
            // removed rating count, ok?
            List allParents = new LinkedList();
            for(String parentDocFullName in parentList) {
                Document parentDoc = xwiki.getDocument(parentDocFullName);
                try {
                    Asset parentAsset = xwiki.curriki.fetchAsset(parentDocFullName)
                    StringBuffer fwItemsB = new StringBuffer()
                    for(String fwI in parentAsset.getValue("fw_items")) {
                        fwItemsB.append('"').append(fwI).append('"');
                        fwItemsB.append(",")
                    }
                    if(fwItemsB.length()&gt;2) fwItemsB.deleteCharAt(fwItemsB.length()-1)
                    StringBuffer levels = new StringBuffer()
                    for(String level in parentAsset.getValue("educational_level")) {
                        levels.append('"').append(level).append('"');
                        levels.append(",")
                    }
                    if(levels.length()&gt;0) levels.deleteCharAt(levels.length()-1)
                    def json = new StringBuffer();
                    json.append("{ 'page':'").append(parentDocFullName);
                    json.append("', 'title':'").append(protectForJSON(parentAsset.getDisplayTitle())).
                        append("', 'assetType':'"+ parentAsset.getAssetType()).
                        append("', 'ict':'"+ parentAsset.getValue("instructional_component")).
                        append("' ,'contributor':'").append(parentDoc.creator).
                        append(" ','contributorName':'").append(protectForJSON(xwiki.getUserName(parentDoc.creator,false))).
                        append("' ,'description':'").append(protectForJSON(parentAsset.getDescription())).
                        append("' ,'fwItems':[").append(fwItemsB).append("]").
                        append(", 'levels':[").append(levels).append("]}");
                    allParents.add(xmlEncode(json.toString()));
                } catch (Exception ex) {
                    ex.printStackTrace();
                };
            }
            return allParents;
        }
    }



    public List getStandardsCodeX() {
        if(alignments==null) return new ArrayList();
        List l = new ArrayList(alignments.size());
        for(alignment in alignments) {
            l.add(xmlEncode(alignment.get("topic.guid")));
        }
        return l;
    }

    public List getStandardsLabelsX() {
        if(alignments==null) return new ArrayList();
        List l = new ArrayList(alignments.size());
        for(alignment in alignments) {
            l.add(xmlEncode(alignment.get("topic.state_num") + " " + alignment.get("topic.stem")  + " "+ alignment.get("topic.text")  + " " + alignment.get("standard.grade")  + " " + alignment.get("standard.grade_code")));
        }
        return l;
    }


    public String protectForJSON(String src) {
        return src.replaceAll("\n","&amp;#xA;").replaceAll("\r","&amp;#xD;").replaceAll("'","\\\\'");
    }

    public String xmlEncode(String src) {
        if(src==null) return null;
        return src.replaceAll("&lt;","&amp;lt;").replaceAll("&gt;","&amp;gt;").replaceAll("&amp;","&amp;amp;").replaceAll("'","&amp;apos;").replaceAll("\"","&amp;quot;");
    }


    public String getTextOfHtml(String html){
        StringBuffer buff = new StringBuffer(html);
        Matcher matcher = Pattern.compile("&amp;\\#([^;]*);").matcher(html);
        int offset = 0;
        while(matcher.find()) {
            String replacement = getTextOfHtmlTrue(matcher.group(0)).trim();
            buff.replace(matcher.start()-offset, matcher.end()-offset, replacement);
            offset += matcher.end()-matcher.start()-1;
        }
        html = buff.toString();
        matcher = Pattern.compile("&lt;[^&gt;]+&gt;").matcher(html);
        offset=0;
        while(matcher.find()) {
            buff.delete(matcher.start()-offset,matcher.end()-offset);
            offset += matcher.end()-matcher.start();
        }
        return buff.toString();
    }
    public String getTextOfHtmlTrue(String html) {

        StringBuffer buff = new StringBuffer();
        StringReader read = new StringReader(html);
        HTMLEditorKit.ParserCallback htmlListener = new HereParser(buff)
        new ParserDelegator().parse(read,htmlListener, true);
        return buff.toString();
    }

}

class FormatterThreadLocal extends ThreadLocal {
     protected Object initialValue() {
         return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
     }
 };


/* Unfortunately, this parser seems to either swallow all spaces or
  swallow a few things that get lost (e.g. a "/"). Giving up.
 */
class HereParser extends HTMLEditorKit.ParserCallback {

    public HereParser(StringBuffer buff) {
        this.buff = buff;
    }

    StringBuffer buff;

    void handleEndOfLineString(String s) {
        buff.append(s);
    }

    void handleText(char[] chars, int i) {
        buff.append(chars).append(' ');
    }
}
</content></xwikidoc>